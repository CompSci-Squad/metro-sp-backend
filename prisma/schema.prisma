// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Permissions {
  ADMIN
  READ
  WRITE
  DELETE
  UPDATE
  REMOVE
}

model User {
  id          Int           @id @default(autoincrement())
  email       String
  password    String
  cpf         String
  permissions Permissions[]

  stationId Int     @map("station_id")
  station   Station @relation(fields: [stationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
}

model Station {
  id        Int    @id @default(autoincrement())
  name      String
  latitude  Float
  longitude Float
  address   String

  openingTime DateTime @map("opening_time")
  closingTime DateTime @map("closing_time")

  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  deletedAt DateTime?  @map("deleted_at")
  users     User[]
  entrances  Entrance[]
}

enum EntranceStatus {
  ACTIVE
  MAINTENANCE
  CLOSED
}

model Entrance {
  id        Int            @id @default(autoincrement())
  address   String
  latitude  Float
  longitude Float
  status    EntranceStatus

  stationId Int     @map("station_id")
  station   Station @relation(fields: [stationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  terminal Terminal?
}

model Terminal {
  id Int @id @default(autoincrement())

  isActive Boolean @map("is_active")

  entranceId Int      @unique @map("entrance_id")
  entrance   Entrance @relation(fields: [entranceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
}
